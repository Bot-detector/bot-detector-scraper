version: '3'
services:
  kafka:
    container_name: kafka
    image: bitnami/kafka:3.5.1-debian-11-r3
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
      # volumes:
      #   - ./kafka:/bitnami/kafka:rw
    ports:
      - 9094:9094
      - 9092:9092
    healthcheck:
      test:
        [
          "CMD",
          "kafka-topics.sh",
          "--list",
          "--bootstrap-server",
          "localhost:9092"
        ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - botdetector-network

  kafka_setup:
    container_name: kafka_setup
    image: bot_detector/kafka_setup
    build:
      context: ./kafka_setup
    environment:
      - KAFKA_BROKER=kafka:9092
    networks:
      - botdetector-network
    depends_on:
      kafka:
        condition: service_healthy

  kafdrop:
    container_name: kafdrop
    image: obsidiandynamics/kafdrop:latest
    environment:
      - KAFKA_BROKERCONNECT=kafka:9092
      - JVM_OPTS=-Xms32M -Xmx64M
      - SERVER_SERVLET_CONTEXTPATH=/
    ports:
      - 9000:9000
    restart: on-failure
    networks:
      - botdetector-network
    depends_on:
      kafka:
        condition: service_healthy

  highscore:
    image: bot_detector/scraper
    container_name: highscore
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    command: python src/main_v2.0.py --scraper highscore
    restart: on-failure
    networks:
      - botdetector-network
    env_file:
      - .env
    volumes:
      -  ./src:/project/src
    depends_on:
      kafka:
        condition: service_healthy

  runemetrics:
    image: bot_detector/scraper
    container_name: runemetrics
    build:
      context: .
      dockerfile: Dockerfile
      target: base
    command: python src/main_v2.0.py --scraper runemetrics
    restart: on-failure
    networks:
      - botdetector-network
    env_file:
      - .env
    volumes:
      -  ./src:/project/src
    depends_on:
      kafka:
        condition: service_healthy
        
networks:
  botdetector-network:
